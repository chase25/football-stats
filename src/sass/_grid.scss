// Mixin to generate column widths
@mixin grid-cols($num, $gutter, $columns) {
	$one-col: $grid-width / $columns;
	width: $one-col * $num;
}
@mixin make-column-push($col, $columns: $columns) {
	margin-left: percentage($col / $columns);
	&:first-of-type {
		$col-percent: percentage(($col / $columns));
		margin-left: $col-percent;
	}
}

//Grid rows
.row {
	&:after {
		content: "";
		display: block;
		visibility: hidden;
	}
}
.grid__row {
	margin-right: -($mobile-gutter);
	margin-left: -($mobile-gutter);
	
	&:after {
	  content: "";
	  display: block;
	  visibility: hidden;
	}
	@media screen and ($medium) {
		margin-left: -($tablet-gutter);
		margin-right: -($tablet-gutter);
	}
	@media screen and ($large) {
		margin-left: -($desktop-gutter);
		margin-right: -($desktop-gutter);
	}
}

// Grid cols
div[class^='col-sm-'],
div[class^='col-md-'],
div[class^='col-lg-'] {
	display: block;
	float: left;
	min-height: 1px;
}
@for $i from 1 through $columns {
	.col-sm-#{$i} {
		@include grid-cols($i, $mobile-gutter, $columns);
	}
	div[class^='col-sm-'],
	div[class^='col-md-'],
	div[class^='col-lg-'] {
		box-sizing: border-box;
		padding: 0 $mobile-gutter 0;
	}
}

@media screen and ($medium) {
	@for $i from 1 through $columns {
		.col-md-#{$i} {
			@include grid-cols($i, $tablet-gutter, $columns);
		}
	}
	div[class^='col-sm-'],
	div[class^='col-md-'],
	div[class^='col-lg-'] {
		box-sizing: border-box;
		padding: 0 $tablet-gutter $tablet-gutter;
	}
}
@media screen and ($large) {
	@for $i from 1 through $columns {
		.col-lg-#{$i} {
			@include grid-cols($i, $desktop-gutter, $columns);
		}
	}
	div[class^='col-sm-'],
	div[class^='col-md-'],
	div[class^='col-lg-'] {
		padding: 0 $desktop-gutter $desktop-gutter;
	}
}

